// Generated by Copilot
import { HeartbeatOptions, sendHeartbeat } from "./plugins/wakatime/heartbeat";
import "./globals/env";
import { HeartbeatError } from "#utils/messages.ts";

// Send requests that would otherwise be blocked by CORS if sent from a content script
browser.runtime.onMessage.addListener((msg: { type: string; options: HeartbeatOptions; }, _sender: any, sendResponse: (x: HeartbeatError) => void) => {
  if (msg.type === "send-background-heartbeat") {
    void sendHeartbeat(msg.options, sendResponse);
  }
  return true;
});

if (BROWSER === "firefox") {
  // Block the initial load of calculator.js in order to run a modified version later
  browser.webRequest.onBeforeRequest.addListener(
    ({ url }) => ({
      cancel: url.endsWith(".js"),
    }),
    {
      urls: [
        "https://*.desmos.com/assets/build/calculator_desktop-*.js",
        "https://*.desmos.com/assets/build/calculator_geometry-*.js",
        "https://*.desmos.com/assets/build/calculator_3d-*.js",
        "https://*.desmos.com/assets/build/shared_calculator_desktop-*.js",
      ],
      types: ["script"]
    },
    ["blocking"]
  );

  // Modify headers for SharedArrayBuffer support
  browser.webRequest.onHeadersReceived.addListener(
    (details) => {
      const filteredHeaders = details.responseHeaders?.filter(
        header => !['cross-origin-embedder-policy', 'cross-origin-opener-policy']
          .includes(header.name.toLowerCase())
      ) ?? [];

      return {
        responseHeaders: [
          ...filteredHeaders,
          {
            name: "Cross-Origin-Embedder-Policy",
            value: "require-corp"
          },
          {
            name: "Cross-Origin-Opener-Policy",
            value: "same-origin"
          }
        ]
      };
    },
    {
      urls: [
        "https://*.desmos.com/calculator*",
        "https://*.desmos.com/geometry*",
        "https://*.desmos.com/3d*"
      ]
    },
    ["blocking", "responseHeaders"]
  );

  // Modify headers for thumbnails
  browser.webRequest.onHeadersReceived.addListener(
    (details) => {
      const filteredHeaders = details.responseHeaders?.filter(
        header => header.name.toLowerCase() !== 'cross-origin-resource-policy'
      ) ?? [];

      return {
        responseHeaders: [
          ...filteredHeaders,
          {
            name: "Cross-Origin-Resource-Policy",
            value: "cross-origin"
          }
        ]
      };
    },
    {
      urls: [
        "https://saved-work.desmos.com/calc_thumbs/*",
        "https://saved-work.desmos.com/calc-recovery-thumbs/*",
        "https://saved-work.desmos.com/calc-3d-thumbs/*"
      ]
    },
    ["blocking", "responseHeaders"]
  );
}
